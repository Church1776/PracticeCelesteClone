#!/bin/bash

### --- This file is meant to be used when in the terminal to call the local project whose directory you're currently working in/opened to.

### --- Add this file to an already existing default $PATH environment directory or create your own folder
### --- and add that folder as a $PATH in your environment variables yourself. Your only limitation is that
### --- your terminal must call this script from within the project directory you wish to use it. With this
### --- script you'll be able to call to the local script from within any project directory you work in.
### --- Just remember that you must have your terminal open to the project directory root folder. If you are
### --- in any sub folders the script will not work.

#################################################################################################################################
##### --- MAKE SURE TO RENAME THE SCRIPT 'debug.sh'. SCRIPT CAN"T BE EXECUTED IF YOU DON"T CHANGE THE FILE EXTENSION!!! --- #####
#################################################################################################################################


ARGS=""
FLAGS=""
TEST=0

for arg in "$@"; do
    case "$arg" in
        test)
            echo "No flags given."
            TEST=1
            ;;
        full)
            FLAGS="-g -g3 -O0 -Wall -Wextra -Wpedantic -gsplit-dwarf -fsanitize=address,undefined"
            ;;)
            ARGS="$ARGS $arg"
            ;;
        auto | noauto)
            ARGS="$ARGS $arg"
            ;;
        clean | noclean)
            ARGS="$ARGS $arg"
            ;;
        link | nolink)
            ARGS="$ARGS $arg"
            ;;
        archive | noarchive)
            ARGS="$ARGS $arg"
            ;;
        help | nohelp)
            ARGS="$ARGS $arg"
            ;;
        dll | nodll)
            ARGS="$ARGS $arg"
            ;;
        lib | nolib)
            ARGS="$ARGS $arg"
            ;;
        pch | nopch)
            ARGS="$ARGS $arg"
            ;;
        no)
            ARGS="$ARGS $arg"
            ;;
        *)
            FLAGS="$FLAGS $arg"
            ;;
    esac
done

if [ -z "$FLAGS" ]; then
    FLAGS="-g -gsplit-dwarf"
fi

if [ $TEST -eq 1 ]; then
    FLAGS=""
fi

sh build.sh $ARGS $FLAGS
exit 0    


#sh build.sh -g3  -gsplit-dwarf



# Normal debug build with runtime sanitizers
#g++ -g -ggdb -O0 -Wall -Wextra -Wpedantic -fsanitize=address,undefined main.cpp -o main

# Debug build exporting all symbols (useful for gdb & plugins)
#g++ -g -O0 -rdynamic main.cpp -o main

# Debug build with a linker map file for symbol tracing
#g++ -g -O0 -Wl,-Map=main.map,--cref